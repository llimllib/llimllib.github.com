<?xml version="1.0" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>My Name Rhymes</title>
        <link>http://billmill.org/</link>
        <description></description>
        <language>en-us</language>
        <atom:link href="http://billmill.org/Rss" rel="self" type="application/rss+xml" />
        <item>
            <title>Imitating Sol LeWitt&#x27;s Wall Drawing #1136 in Javascript</title>
            <guid isPermaLink="true">http://billmill.org/sol_1136.html</guid>
            <link>http://billmill.org/sol_1136.html</link>
            <description><![CDATA[
<p><em>See the finished product <a
href="http://billmill.org/solving-sol/1136/llimllib/">here</a></em>

<p>Each of Sol LeWitt's "wall drawings" consists of a short set of
instructions, sometimes with an accompanying diagram, that instructs the
"owner" on  how to implement the work; Sol usually did not execute his own
work, but rather the "art" consisted in the concept. Here is an example
instruction:

<p><a href="images/sol/lewitt_49_instructions.jpg"><img
src="images/sol/lewitt_49_instructions.jpg" width="700"></a>

<p>A few years ago, I found Brad Bouse's excellent <a
href="http://solvingsol.com/">Solving Sol</a> website, which asks users to
implement some of these wall drawings in the browser. I tried a few, and got
hooked because iplmenting a wall drawing was a pleasing, easy way to kill a few
hours.

<p>Here are my interpretations of wall drawing <a
href="http://billmill.org/solving-sol/011/llimllib/index.html">11</a>, <a
href="http://billmill.org/solving-sol/016/llimllib/index.html">16</a>, <a
href="http://billmill.org/solving-sol/046/llimllib/index.html">46</a>, <a
href="http://billmill.org/solving-sol/049/llimllib/index.html">49</a> and <a
href="http://billmill.org/solving-sol/130/llimllib/index.html">130</a>.

<p>Almost exactly one year ago today, I saw Wall Drawing 1136 and decided to
take it on. Here it is, as installed at the Tate Modern:

<p><a href="images/sol/lewitt_1136_tate.jpg"><img
src="images/sol/lewitt_1136_tate.jpg" width="700"></a>

<p>I thought that perhaps it would be a bit more difficult than the others I
had done, since I had to deal with an irregular curve instead of lines and
arcs, but I was unprepared for just how much of a pain it would prove to
be.

<h2>The Instructions</h2>

<p>There are several pictures of 1136 available on the web, but it's much
easier to work with the full instructions, as I had with the other LeWitts I
had done.

<p>Here is what the Tate <a
href="http://www.tate.org.uk/art/artworks/lewitt-wall-drawing-1136-ar00165/text-summary">has
to say</a> about the work:

<blockquote>A letter of instruction, an installation diagram and a certificate
pertaining to Wall Drawing #1136 can be found in Tate Gallery Records (PC10.1
LeWitt, Sol)... The diagram is a small colour inkjet print that lays out the
pattern of the wall drawing in one continuous elongated horizontal
band.</blockquote>

<p>I contacted the librarians at the Tate to ask if I could see the installation
diagram, but they declined and responded by emphasizing this portion of the
summary:

<p><blockquote>Please be advised that the documents are the signature for the Wall
Drawing and must accompany the Wall Drawing if it is sold or otherwise
transferred. They represent the transfer of ownership from the artist to you …
Under no circumstances will we issue a new certificate!</blockquote>

<p>To me, this suggests that the documents must accompany the sale of the
artwork, but not that showing me a copy would constitute a transfer of the
work. I am disappointed with the unwillingness of a public (albeit funded by a
government different than my own) institution to share information about the
artwork and skeptical that it would be actually damaging to anyone.

<p>It seemed that I would not be able to work with the official instructions, but
I carried on as best I could.

<p><em>(If anyone cares to go to the Tate Library and ask about seeing the
instructions, I would be forever grateful! Please <a
href="mailto:bill@billmill.org">drop me a line if you do</a>.)</em>

<h2>The Drawing</h2>

<p>The first step was simple but tedious: transcribe the color sequence of
equal width lines that make up the background of the work. In case anybody else
ever needs it, here is the sequence, where G is green, Y yellow, B blue, O
orange, R red, P purple, and E grey:

<p><pre>GYBOPERBYGERPGYBOERBGYPOBGRPEYBGOPYBERPOGBYPREOGYBOERPBYOPGEBRY
BEOPRGBEYRGPOBRGOYEBRGOPYBERGORBEYBOPGRBPEYBRPGOGBYEPORGEBPYRGO
PEYGPOREBYPGBROGYBR</pre>

<p>To generate this sequence and ensure it was correct, I simply opened an
image of the work in photoshop and annotated it with the text tool so that I
could check to avoid mistranslations.

<p>Next, however came the curve. Or, as I would find out, the 9 curves.

<p>I took the best image of 1136, which I've embedded above, cropped it and
fixed the perspective as best I could, creating a base image for tracing the
curve.

<p>I had hoped that I would be able to "cheat" by doing something clever like
tracing the curve once, then drawing it 9 times in different widths. I was
unfortunately never able to come up with a clever way to have different colors
on a curve in the way that this curve goes.

<p>Once I realized that I needed 9 curves, my naïve first guess was to just try
and trace one curve, then subtract a fixed amount from it to make the curve
above it. The <a
href="http://bl.ocks.org/llimllib/b7fce04e7d63427b5b3f91fae547223d">total
failure</a> of this method led me to the understanding that each of the 9
curves was in fact a different curve, and that perhaps I needed to understand a
bit more about bezier curve offsetting than I did.

<p><img src="images/sol/offset_fail.png"><br><em class="caption">fail.</em>

<p>I looked into bezier offsetting, and found a rich literature which I will
sum up by saying that it's <a
href="https://pomax.github.io/bezierinfo/#offsetting">impossible in the general
case</a>, and possible but difficult to estimate in practice.

<p>After I implemented <a
href="http://bl.ocks.org/llimllib/8d7d571c3233e5cf711f6a6c1e28b5fb">a lousy
version</a> of the <a
href="http://math.stackexchange.com/a/467038/109164">Tiller-Hanson</a>
approximation algorithm, I was fortunate enough to find the <a
href="https://github.com/Pomax/bezierjs">bezier.js</a> library which was
capable of handling all the tricky bits for me.

<p>Finally I had the tools to set up <a
href="http://bl.ocks.org/llimllib/a436acd66740f978d73ce4261b4c3aa8">a shim for
tracing the curve</a>; go there and play around with the very slow control
point editor to get a feel for the slow, painful process of editing the curve
to match LeWitt.

<p>Once I got that looking as close as I felt like getting it, even though
there are still some srerious warts with the curve, I copied the paths out of
the SVG using the Chrome inspector, and used those as the magic paths <a
href="https://github.com/llimllib/solving-sol/blob/d822e18809731e6673cc2de796f32446712631b0/1136/llimllib/index.html#L113">you
can see in the source</a>.

<p><img src="images/sol/bug.png"><br><em class="caption">I cannot unsee this
bad join but I'm also not willing to fix it.</em>

<h2>Conclusion</h2>

<p>This project took me much, much longer than I expected. I'm glad I got it
out eventually, even if all I can see are the ways it could be improved.

<p>I'm sure that some person would find an easy way to solve it! Like tracing
it in Illustractor or Inkscape and just using those curves; but I was unwilling
to use a drawing tool, and that unwillingness got me to learn some new
algorithms.

<p>I hope you like <a
href="http://billmill.org/solving-sol/1136/llimllib/">the piece</a>, and if
you're interested in doing a Sol, I highly recommend it. Go <a
href="https://github.com/wholepixel/solving-sol">check out the repo</a> and
have at it. Many of them can be completed in just an hour or two, but others
might lead you on a a bit of a journey.
]]></description>
            <pubDate>Sat, 08 Oct 2016 21:30:25 +0000</pubDate>
        </item>
        <item>
            <title>Debugging Redis with Xcode</title>
            <guid isPermaLink="true">http://billmill.org/xcode_redis.html</guid>
            <link>http://billmill.org/xcode_redis.html</link>
            <description><![CDATA[<p>Recently I've been doing a bit of work on <a
href="http://redis.io">Redis</a>. While I code in vim, and that's not changing
any time soon, I've found Xcode to be a handy debugger.
It's not difficult to set up, but it is <em>extremely</em> unintuitive, so
I thought I'd write up a short visual guide.

<p>In this article, I'll assume that <code>~/code/</code> is your directory for
storing code; substitute your own directory where required.

<p>The first thing you'll want to do is check out a copy of redis. In your
<code>~/code</code> directory, clone the official redis repository:
<code>git clone https://github.com/antirez/redis.git</code>

<p>Next, open up Xcode and go to <code>File->New->Project</code> or click
<code>Create a New
Xcode Project</code>. On the left-hand pane select <code>Other</code>, and on
the right, <code>Empty</code>.

<p><img src="images/xcode_redis/1.jpg">

<p>Enter <code>redis</code> as the product name (or anything else if you so desire) in the
next panel, and
then choose a directory in which to store the xcode project. I recommend
storing it in a directory separate from your redis git directory, so that you
don't accidentally commit anything you don't intend.

<p>On the file picker, make sure the <code>Create local git repository for this
project</code> box is unchecked, as we won't be needing it.

<p>At this point, you should be looking at an empty project:

<p><img src="images/xcode_redis/2.jpg">

<p>Click on <code>File->Add Files to "redis"</code>, and choose the directory into which you
cloned redis. If you're following along, that should be
<code>~/code/redis</code>. After you do so, you should see the directory in
xcode's Project Navigator.

<p>Now we'll set up a build target, which tells Xcode how to build redis. Click
on <code>Add Target</code> towards the bottom of the Xcode window, and you should see
something like this:

<p><img src="images/xcode_redis/3.jpg">

<p>Choose <code>Other</code> under the OS X target types and
<code>External Build System</code> as
the type of target. On the next pane, enter <code>redis</code> as the product
name and
leave the rest of the values at their defaults, and click <code>finish</code>.

<p>Now, replace <code>$(ARGS)</code> in the <code>Arguments</code> input box
with <code>clean noopt</code> and enter the directory where you cloned redis in
the <code>Directory</code> input box. Mine looks like this:

<p><img src="images/xcode_redis/4.jpg">

<p>And now... you're almost there. Click the <code>Run</code> button at the
top left of the screen, and you should see a message saying <code>Build
Succeeded</code>.

<p>Finally, at the top left of the window, click on
<code>"redis"->Edit Scheme</code>.

<p><img src="images/xcode_redis/5.jpg">

<p>In the pane that drops down, click on the <code>Executable</code> drop down
and click on <code>other</code>, then select <code>src/redis-server</code> from
your redis directory. When you're done, the pane should look like this:

<p><img src="images/xcode_redis/6.jpg">

<p>This tells Xcode to start the redis-server executable after it builds redis,
so you can then connect to it via redis-cli, send commands, and debug them.

<p>To see if it works, click on the <code>run</code> button at the top left; redis should
build and Xcode should start redis-server for you. If you go to a console and
run <code>redis-cli</code>, it should connect to your localhost. At this point, you can
start adding breakpoints to dig in and see what redis is doing. Here's a
screenshot of me debugging src/redis.c, showing off some of xcode's debugging
features:

<p><img src="images/xcode_redis/7.jpg">

<p>Special thanks to Paul Smith, whose blog post <a
href="http://pauladamsmith.com/blog/2011/03/redis_get_set.html">taught</a> me
how to build redis so that it can be debugged.

<p>To learn a bit about the commands you can use to debug redis using the
window on the bottom right, you can go read <a
href="https://www.hackerschool.com/blog/5-learning-c-with-gdb">this post</a>
for a start (all the gdb commands are lldb commands too).

<p>Coming up next, I'll show you how to add a new data type to redis.
]]></description>
            <pubDate>Sun, 26 Aug 2012 23:14:00 +0000</pubDate>
        </item>
        <item>
            <title>Visualizing Permutations</title>
            <guid isPermaLink="true">http://billmill.org/permvis.html</guid>
            <link>http://billmill.org/permvis.html</link>
            <description><![CDATA[<p>At some point a few years ago, I got interested in permutation algorithms and
implemented a few that were in Knuth as well as gathered some that were
floating around the internet. I never did anything with them, until I saw Aldo
Cortesi's excellent <a
href="http://corte.si/posts/code/visualisingsorting/index.html">sorting
visualizations</a> which reminded me of <a
href="http://img.skitch.com/20100429-muthj97xmh8a34dnwnqkc64d6e.jpg">a figure
from Knuth</a>, and inspired me to create some visualizations of my own using
Aldo's code.

<p><h2>Lexicographic Permutations</h2>

<p>Informally, the permutations of a set are all possible orderings of its
members. The permutations of the set <i>{1,2,3}</i>, are: 

<p><code>[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]</code>

<p>This particular ordering of permutations is in <i>lexicographic order</i>;
it's listed in the same order as it would be in the dictionary. There are many
well-known algorithms for generating permutations in lexicographic order. <a
href="http://github.com/llimllib/personal_code/blob/master/python/permutation/permute.py#L5">Here</a>
is my version of one such algorithm; <a
href="http://www-cs-faculty.stanford.edu/~knuth/fasc2b.ps.gz">go read Knuth</a>
if you're at all interested in learning more.

<p>Here's what a lexicographic permutation of four elements looks like:

<p><img src="http://billmill.org/static/perm1.png">

<p>It's easy to see that each element gets its turn at the top of the list, and
that each time a new element goes to the top the remainder of the list is
sorted.

<p><h2>Single-transposition Permutations</h2>

<p>It is an interesting and non-obvious fact that there's a way to permute any
given set by only switching the positions of one pair of elements per iteration.
This permutation is deeply related to the <a
href="http://en.wikipedia.org/wiki/Gray_code">Gray code</a>, which if you
haven't heard of, I highly recommend you go read about. The Knuth <a
href="http://www-cs-faculty.stanford.edu/~knuth/fasc2b.ps.gz">paper</a> I
mentioned aleady has a superb bit on the Gray code.

<p><img src="http://billmill.org/static/perm4.png">

<p>This image demonstrates clearly that at each step, there is exactly one
crossing. My implementation of this algorithm is <a
href="http://github.com/llimllib/personal_code/blob/master/python/permutation/permute.py#L201">also
on github.</a>

<p><h2>CLP Permutation</h2>

<p>I know very little about this algorithm, except that I got it from <a
href="http://mail.python.org/pipermail/python-list/2002-November/170393.html">a message
to comp.lang.python</a> where it's attributed to Alex Martelli, Duncan Smith,
and somebody named Anton (Anton Vredegoor?). Despite the crazy number of
switches, and the fact that it reorders the list it's passed, it's actually
crazy fast.

<p><img src="http://billmill.org/static/clp_perm.png">

<p>I'd love to hear from anyone with more info on this algorithm; my slightly
modified version is <a
href="http://github.com/llimllib/personal_code/blob/master/python/permutation/permute.py#L233">here</a>.

<p><h2>Odds and Ends</h2>

<p>Well, that's it, just wanted to post some fun pictures of permutations, I
hope you enjoyed it. The code I used to generate the pictures is derived from
Aldo Cortesi's wonderful <a
href="http://github.com/cortesi/sortvis">sortvis</a>, and all my modifications to
it are <a
href="http://github.com/llimllib/personal_code/tree/master/python/permvis">available
on github</a> as well.

<p>If you want bonus points, I never got around to implementing Knuth's
algorithm E (it's given towards the end of <a
href="http://www-cs-faculty.stanford.edu/~knuth/fasc2b.ps.gz">this</a>), and
I'd love for somebody else to do my work for me. If you're tough enough, that
is.
]]></description>
            <pubDate>Thu, 29 Apr 2010 21:10:00 +0000</pubDate>
        </item>
        <item>
            <title>The Bill Mill NCAA Bracket Randomizer, 2010 edition</title>
            <guid isPermaLink="true">http://billmill.org/ncaa_randomizer_2010.html</guid>
            <link>http://billmill.org/ncaa_randomizer_2010.html</link>
            <description><![CDATA[<p>I've updated my <a href="http://billmill.org/ncaa-bracket-randomizer/">NCAA bracket
randomizer</a> for the 2010 field; check it out
<a href="http://billmill.org/ncaa-bracket-randomizer/">here</a>.
As of now, there are no improvements, but those may
come in the next few days; feel free to suggest ideas.
]]></description>
            <pubDate>Sun, 14 Mar 2010 20:15:00 +0000</pubDate>
        </item>
        <item>
            <title>Multi-Line Lambdas in Python Using the With Statement</title>
            <guid isPermaLink="true">http://billmill.org/multi_line_lambdas.html</guid>
            <link>http://billmill.org/multi_line_lambdas.html</link>
            <description><![CDATA[<p>Python <a 
href="http://www.artima.com/weblogs/viewpost.jsp?thread=147358">does not have 
multi-line lambdas</a> because Guido dislikes them aesthetically. However, with 
just a bit of introspection, code like this is possible:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #666666">&gt;&gt;&gt;</span> <span style="color: #007020; font-weight: bold">with</span> each([<span style="color: #40a070">12</span>, <span style="color: #40a070">14</span>, <span style="color: #40a070">16</span>]):
<span style="color: #666666">...</span>   <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">_</span>(x):
<span style="color: #666666">...</span>     <span style="color: #007020; font-weight: bold">print</span> x
<span style="color: #666666">...</span>     <span style="color: #007020; font-weight: bold">print</span> x<span style="color: #666666">+</span><span style="color: #40a070">1</span>
<span style="color: #666666">...</span>  
<span style="color: #40a070">12</span>
<span style="color: #40a070">13</span>
<span style="color: #40a070">14</span>
<span style="color: #40a070">15</span>
<span style="color: #40a070">16</span>
<span style="color: #40a070">17</span>
</pre></div>


<p>I'll say a bit about my motivation for creating code like this, show how 
easy it is to write, and then I'll argue that code like this is both pythonic 
and aesthetically appealing in some circumstances.

<p><h2>A Mystery Solved (By Holmes Himself!)</h2>

<p>When I first saw code using the <code>with</code> statement, my hope was 
that it would be able to be used somewhat like Haskell's <a 
href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29#More_complex_examples">Where 
clause</a> or Ruby's <a 
href="http://allaboutruby.wordpress.com/2006/01/20/ruby-blocks-101/">blocks</a>.  
When I dug into the <a 
href="http://www.python.org/dev/peps/pep-0343/">spec</a>, I was disappointed to 
discover that if it was possible, it wasn't easy, and I pushed the thought 
aside.

<p>That was a couple years ago, and I didn't give it a moment's thought until I 
saw <a 
href="http://www.mechanicalcat.net/richard/log/Python/Something_I_m_working_on.3">a 
blog post</a> by Richard Jones that uses a <code>with</code> statement in exactly 
the way I had considered impossible up to now. I spent a few hours trying to 
figure it out, but I was stumped, so I put up <a 
href="http://stackoverflow.com/questions/1255914/finding-functions-defined-in-a-with-block">a 
question</a> on Stack Overflow to see if somebody could show me how he did it.

<p>Within a few hours, <a 
href="http://en.wikipedia.org/wiki/Alex_Martelli">Alex Martelli</a> himself 
chimed in with a wonderful solution. The gist of the answer is that you can use 
the <code>inspect</code> module to access the <a 
href="http://www.python.org/doc/2.5.2/lib/typecontextmanager.html">context 
manager</a>'s calling scope, and figure out what variables have been defined 
between its <code>__enter__</code> and <code>__exit__</code> functions. I'm 
glad I asked aloud, because even if I had stumbled close to the solution, I 
surely wouldn't have come up with one as complete as his.

<p><h2>The How</h2>

<p>Once I had Alex's proof of concept code in hand, I went to work making it do 
what I'd had in my head so long ago. In about an hour, I was able to write code 
that looks like this:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #555555; font-weight: bold">@accepts_block</span>
<span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">each</span>(iterable, block):
  <span style="color: #007020; font-weight: bold">for</span> i <span style="color: #007020; font-weight: bold">in</span> iterable:
      block(i)

<span style="color: #007020; font-weight: bold">with</span> each([<span style="color: #4070a0">&quot;twelve&quot;</span>, <span style="color: #4070a0">&quot;fourteen&quot;</span>, <span style="color: #4070a0">&quot;sixteen&quot;</span>]):
  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">_</span>(x):
    <span style="color: #007020; font-weight: bold">print</span> x

<span style="color: #555555; font-weight: bold">@accepts_block</span>
<span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">bmap</span>(arr, block):
  <span style="color: #007020; font-weight: bold">return</span> <span style="color: #007020">map</span>(block, arr)

<span style="color: #007020; font-weight: bold">with</span> bmap([<span style="color: #40a070">1</span>,<span style="color: #40a070">2</span>,<span style="color: #40a070">3</span>]) <span style="color: #007020; font-weight: bold">as</span> foo:
  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">_</span>(x):
    <span style="color: #007020; font-weight: bold">return</span> (<span style="color: #007020">float</span>(x) <span style="color: #666666">+</span> <span style="color: #40a070">1</span>) <span style="color: #666666">/</span> <span style="color: #40a070">2</span>

<span style="color: #007020; font-weight: bold">print</span> foo <span style="color: #60a0b0; font-style: italic"># [1.0, 1.5, 2.0]</span>
</pre></div>


<p>What you see above are two functions which use a decorator giving them 
access to the function defined within the <code>with</code> block. The 
decorator passes the block to the function as its last argument just <a 
href="http://eli.thegreenplace.net/2006/04/18/understanding-ruby-blocks-procs-and-methods/">like 
in Ruby</a>.

<p>To understand how this happens, you need to know how context managers work.  
Context managers consist of a class with <code>__enter__</code> and 
<code>__exit__</code> methods which are called upon entering the with block and 
upon exiting, just as you'd expect.

<p>Alex's solution involves scanning the scope of the calling function from the 
<code>__enter__</code> and <code>__exit__</code> methods, and pulling out the 
differences between them. These differences will be all the variables that were 
defined in the <code>with</code> block. A sketch:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">class</span> <span style="color: #0e84b5; font-weight: bold">FindInteresting</span>(<span style="color: #007020">object</span>):
  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__enter__</span>(<span style="color: #007020">self</span>):
    f <span style="color: #666666">=</span> inspect<span style="color: #666666">.</span>currentframe(<span style="color: #40a070">1</span>)
    <span style="color: #007020">self</span><span style="color: #666666">.</span>already_defined <span style="color: #666666">=</span> <span style="color: #007020">dict</span>(f<span style="color: #666666">.</span>f_locals)

  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__exit__</span>(<span style="color: #007020">self</span>):
    f <span style="color: #666666">=</span> inspect<span style="color: #666666">.</span>currentframe(<span style="color: #40a070">1</span>)
    <span style="color: #60a0b0; font-style: italic">#pick out the differences between f.f_locals and self.already_defined</span>
</pre></div>


<p>When we pick out the differences between the two, we need to be careful to 
check for names that have been redefined so that we don't miss out on new 
functions that reuse old names.

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__exit__</span>(<span style="color: #007020">self</span>):
  f <span style="color: #666666">=</span> inspect<span style="color: #666666">.</span>currentframe(<span style="color: #40a070">1</span>)
  interesting <span style="color: #666666">=</span> {}
  <span style="color: #007020; font-weight: bold">for</span> n <span style="color: #007020; font-weight: bold">in</span> f<span style="color: #666666">.</span>f_locals:
    newf <span style="color: #666666">=</span> f<span style="color: #666666">.</span>f_locals[n]
    <span style="color: #007020; font-weight: bold">if</span> n <span style="color: #007020; font-weight: bold">not</span> <span style="color: #007020; font-weight: bold">in</span> <span style="color: #007020">self</span><span style="color: #666666">.</span>already_defined:
      interesting[n] <span style="color: #666666">=</span> newf
      <span style="color: #007020; font-weight: bold">continue</span>
    anf <span style="color: #666666">=</span> <span style="color: #007020">self</span><span style="color: #666666">.</span>already_defined[n]
    <span style="color: #007020; font-weight: bold">if</span> <span style="color: #007020">id</span>(newf) <span style="color: #666666">!=</span> <span style="color: #007020">id</span>(anf):
      interesting[n] <span style="color: #666666">=</span> newf
</pre></div>


<p>After this function has run, <code>interesting</code> is a dictionary which 
(probably) contains all the names and values of the variables that have been 
redefined in the <code>with</code> block.

<p>Because we have to use the <code>id</code> check to determine if a name has 
been redefined, and Python sometimes caches objects in memory, our function can 
be fooled. In this case, <code>interesting</code> will not detect 
<code>x</code> because it's being redefined and cpython caches the low 
integers, so <code>id(x)</code> will be the same for both <code>x</code>s.

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span>x <span style="color: #666666">=</span> <span style="color: #40a070">1</span>
<span style="color: #007020; font-weight: bold">with</span> FindInteresting:
  x <span style="color: #666666">=</span> <span style="color: #40a070">1</span>
</pre></div>


<p>In general, the cpython runtime is not aggressive about caching, but you 
should know that this possibility exists. If you use this technique, I 
recommend being strict about checking only newly defined functions, since 
there's no way to be sure if you missed any redefined names.

<p>To make the teaser code at the top of the article work, I just wrapped 
Alex's code into a decorator that returned a context manager, then called the 
function being decorated with the definitions that we found in the 
<code>interesting</code> dictionary. The context manager's 
<code>__call__</code> function gets overridden to allow you to pass in 
arguments for the function being decorated.

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">accepts_block</span>(f):
  <span style="color: #007020; font-weight: bold">class</span> <span style="color: #0e84b5; font-weight: bold">BlockContextManager</span>(<span style="color: #007020">object</span>):
    <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__call__</span>(<span style="color: #007020">self</span>, <span style="color: #666666">*</span>args, <span style="color: #666666">**</span>kwargs):
      <span style="color: #007020">self</span><span style="color: #666666">.</span>thefunction <span style="color: #666666">=</span> functools<span style="color: #666666">.</span>partial(f, <span style="color: #666666">*</span>args, <span style="color: #666666">**</span>kwargs)
      <span style="color: #007020; font-weight: bold">return</span> <span style="color: #007020">self</span>

    <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__enter__</span>(<span style="color: #007020">self</span>):
      <span style="color: #60a0b0; font-style: italic">#do Alex&#39;s magic, just as above</span>
    
    <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__exit__</span>(<span style="color: #007020">self</span>):
      <span style="color: #60a0b0; font-style: italic">#make the interesting dictionary, just as above</span>

      <span style="color: #007020; font-weight: bold">if</span> <span style="color: #007020">len</span>(interesting) <span style="color: #666666">==</span> <span style="color: #40a070">1</span>:
        block <span style="color: #666666">=</span> <span style="color: #007020">list</span>(interesting<span style="color: #666666">.</span>itervalues())[<span style="color: #40a070">0</span>]
        <span style="color: #007020; font-weight: bold">assert</span> <span style="color: #007020">isinstance</span>(block, <span style="color: #007020">type</span>(<span style="color: #007020; font-weight: bold">lambda</span>:<span style="color: #007020">None</span>))
        <span style="color: #007020">self</span><span style="color: #666666">.</span>thefunction(block)

  <span style="color: #007020; font-weight: bold">return</span> BlockContextManager()
</pre></div>


<p>It looks complicated and nested, but all it's doing is saving the function 
and all its arguments, grabbing the definitions from the with block, making 
sure there's only one definition and it's a function, then tacking it onto the 
end of the arguments list for the function and calling it. Phew.

<p>The code above handles the case where you don't need to store the result of
the function being decorated:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #555555; font-weight: bold">@accepts_block</span>
<span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">each</span>(iterable, block):
  <span style="color: #007020; font-weight: bold">for</span> i <span style="color: #007020; font-weight: bold">in</span> iterable:
    block(i)
</pre></div>


<p>But what if we want to store the result? Turns out, we can further abuse the 
<code>with</code> block by hijacking its <code>as</code> clause. Because a 
variable defined in the <code>as</code> clause gets detected by Alex's code, we 
can use the inspect module to change that variable so that after the with block 
it reflects the result of our computation.

<p>First we check to see if we probably have a block and a variable in the as 
statement, then we reach in and store our result there if we are in that case:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">__exit__</span>(<span style="color: #007020">self</span>):
  <span style="color: #60a0b0; font-style: italic">#exactly as before; frame = inspect.currentframe(1)</span>

  <span style="color: #007020; font-weight: bold">if</span> <span style="color: #007020">len</span>(interesting) <span style="color: #666666">==</span> <span style="color: #40a070">1</span>:
    <span style="color: #60a0b0; font-style: italic">#exactly the same as before</span>
  <span style="color: #007020; font-weight: bold">elif</span> <span style="color: #007020">len</span>(interesting) <span style="color: #666666">==</span> <span style="color: #40a070">2</span>:
    block <span style="color: #666666">=</span> <span style="color: #007020">None</span>
    savename <span style="color: #666666">=</span> <span style="color: #007020">None</span>
    <span style="color: #007020; font-weight: bold">for</span> n,v <span style="color: #007020; font-weight: bold">in</span> interesting<span style="color: #666666">.</span>iteritems():
      <span style="color: #007020; font-weight: bold">if</span> <span style="color: #007020">isinstance</span>(v, <span style="color: #007020">type</span>(<span style="color: #007020; font-weight: bold">lambda</span>:<span style="color: #007020">None</span>)): block <span style="color: #666666">=</span> v
      <span style="color: #007020; font-weight: bold">else</span>: savename <span style="color: #666666">=</span> n

    <span style="color: #007020; font-weight: bold">assert</span> savename <span style="color: #007020; font-weight: bold">and</span> <span style="color: #007020">isinstance</span>(block, <span style="color: #007020">type</span>(<span style="color: #007020; font-weight: bold">lambda</span>:<span style="color: #007020">None</span>))

    frame<span style="color: #666666">.</span>f_locals[savename] <span style="color: #666666">=</span> <span style="color: #007020">self</span><span style="color: #666666">.</span>thefunction(block)
</pre></div>


<p>Which lets us do this:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #555555; font-weight: bold">@accepts_block</span>
<span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">bmap</span>(iterable, block):
  <span style="color: #007020; font-weight: bold">return</span> <span style="color: #007020">map</span>(block, iterable)
  
<span style="color: #007020; font-weight: bold">with</span> bmap([<span style="color: #40a070">1</span>,<span style="color: #40a070">2</span>,<span style="color: #40a070">3</span>]) <span style="color: #007020; font-weight: bold">as</span> result:
  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">_</span>(x):
    <span style="color: #007020; font-weight: bold">return</span> x<span style="color: #666666">**</span><span style="color: #40a070">2</span>

<span style="color: #007020; font-weight: bold">print</span> result <span style="color: #60a0b0; font-style: italic">#[1,4,9]</span>
</pre></div>


<p>This time, we're really taking a leap by assuming that if we find a callable 
and any other variable, that the variable is where we want to store our 
results. This can lead to somewhat unexpected results:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">with</span> bmap([<span style="color: #40a070">1</span>,<span style="color: #40a070">2</span>,<span style="color: #40a070">3</span>]):
  not_a_result <span style="color: #666666">=</span> <span style="color: #40a070">12</span>
  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">_</span>(x):
    <span style="color: #007020; font-weight: bold">return</span> x<span style="color: #666666">**</span><span style="color: #40a070">2</span>

<span style="color: #007020; font-weight: bold">print</span> not_a_result <span style="color: #60a0b0; font-style: italic"># [1,4,9] instead of 12</span>
</pre></div>


<p>That's my extremely long-winded description of how to abuse the with 
operator. If you want to see the full function and the super-lame test code I 
wrote, you can <a 
href="http://github.com/llimllib/Python-Multiline-Lambdas/tree/master">head on 
over to github</a> and check it out.

<p><h2>Aesthetics</h2>

<p>It should be clear from all of the disclaimers I've had to put into this 
article that this technique is of limited use in Python as it stands today.  
I'd like to make an argument that it suggests some nice syntactic sugar for 
python to support someday, while remaining totally ignorant of the actual 
difficulties of putting it into the language.

<p>To do so, I'll start by posting the motivating example for decorators from 
<a href="http://www.python.org/dev/peps/pep-0318/">the relevant PEP</a>. It 
argues that this code:

<p><div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">foo</span>(cls):
  <span style="color: #007020; font-weight: bold">pass</span>
foo <span style="color: #666666">=</span> synchronized(lock)(foo)
foo <span style="color: #666666">=</span> <span style="color: #007020">classmethod</span>(foo)
</pre></div>


is not nearly as readable as this code:

<p><div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #555555; font-weight: bold">@classmethod</span>
<span style="color: #555555; font-weight: bold">@synchronized</span>(lock)
<span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">foo</span>(cls):
  <span style="color: #007020; font-weight: bold">pass</span>
</pre></div>


<p>The main problem with the readability of the first snippet is not that it 
requires 2 redefinitions and 4 repetitions of <code>foo</code>. Rather, the 
main problem is that it places the cart before the horse by putting the 
function body ahead of the declarations that are required to understand it.

<p>Similarly, when we define callback functions before we use them, we're 
required to define the function body before the place where it will be actually 
used. Often, we see:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">handle_click</span>(<span style="color: #007020">self</span>):
  foo <span style="color: #666666">=</span> <span style="color: #007020">self</span><span style="color: #666666">.</span>flim()
  <span style="color: #007020; font-weight: bold">if</span> foo:
    <span style="color: #007020">self</span><span style="color: #666666">.</span>flam(foo)

onClick(handle_click)
</pre></div>


<p>When it would be clearer to write:

<div class="highlight" style="background: #f0f0f0"><pre style="line-height: 125%"><span></span><span style="color: #007020; font-weight: bold">with</span> onClick():
  <span style="color: #007020; font-weight: bold">def</span> <span style="color: #06287e">_</span>(<span style="color: #007020">self</span>):
    foo <span style="color: #666666">=</span> <span style="color: #007020">self</span><span style="color: #666666">.</span>flim()
    <span style="color: #007020; font-weight: bold">if</span> foo:
      <span style="color: #007020">self</span><span style="color: #666666">.</span>flam()
</pre></div>


<p>Which I find much more appealing.

<p><h2>Conclusion</h2>

<p>I expect that there's no way that syntax like this could be officially 
supported by Python, both because of syntactic constraints and the 
<acronym title="Benevolent Dictator For Life">BDFL</acronym>'s aesthetic
concerns. I do think it is a neat exercise in pushing the Python interpreter
and syntax past where they want to go, and I hope that it gives some food for
thought on an interesting Python syntax.

<p>I'm excited to see where Richard Jones goes with his <a 
href="http://www.mechanicalcat.net/richard/log/Python/Something_I_m_working_on.7">project</a>, 
and the design choices that he makes in it, since he's pushing the boundaries 
of Python design. Many thanks to him and Alex Martelli for sending me down 
quite an enjoyable path.

<p>Finally, in case you missed it above, go ahead and <a 
href="http://github.com/llimllib/Python-Multiline-Lambdas/tree/master">take a 
look at the code</a> on github.

<p>If you want to leave a comment, I suggest leaving it on <a href="http://www.reddit.com/r/Python/comments/9cnaw/multiline_lambdas_in_python_using_the_with/">reddit</a>.

<p><h2>Update:</h2> Someone <a
href="http://code.google.com/p/ouspg/wiki/AnonymousBlocksInPython?ts=1253546882&updated=AnonymousBlocksInPython">has</a> taken this technique a bit farther,
using some bytecode hackery.
]]></description>
            <pubDate>Thu, 20 Aug 2009 22:55:00 +0000</pubDate>
        </item>
</channel>
</rss>
